generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

model User {
  id              String       @default(cuid()) @id
  firstName       String?
  lastName        String?
  email           String?      @unique
  createdAt       DateTime     @default(now()) @map(name: "created_at")
  updatedAt       DateTime     @updatedAt @map(name: "updated_at")
  phoneNumber     String?      @unique
  password        String
  role            String?      @default("EMPLOYEE")
  bio             String?
  posts           Post[]
  title           String?
  pronouns        String?
  location        String?
  currentPosition String?
  emailVerified   DateTime?
  gotStarted      Boolean      @default(false)

  friends         User[]       @relation("friends")
  friendsOf       User[]       @relation("friends")

  sentFriendRequest    User[]  @relation("sentFriendRequest")
  pendingFriendRequest User[]  @relation("sentFriendRequest")

  messagesSent         Message[]    @relation("messagesSent")
  messagesReceived     Message[]    @relation("messagesReceived")
  messagesRead         Message[]    @relation("messagesRead")

  jobListingsPosted    JobListing[] @relation("jobListingsPosted")

  education        Education[] @relation("education")
  experience       Experience[] @relation("experience")

  lastSeen         DateTime?
  notifications    Notification[]

  likes            Like[]
  savedPosts       Post[] @relation("savedPosts")

  @@map(name: "users")
  Report Report[]
  Comment Comment[]
  JobCScreened JobListing[] @relation("jobCScreen")
  JobHScreened JobListing[] @relation("jobHScreen")
  JobHired JobListing[] @relation("jobHired")
  applicant applicant[]
}

model applicant {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id])
  userId String
  job JobListing @relation(fields: [jobId], references: [id])
  jobId String
  status String
  resume String
  coverLetter String
  computerScreened Boolean @default(false)
  humanScreened Boolean @default(false)
  hired Boolean @default(false)
}

model Message {
  id            String    @default(cuid()) @id
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  text          String
  sender        User      @relation("messagesSent", fields: [senderId], references: [id])
  senderId      String
  recipient     User      @relation("messagesReceived", fields: [recipientId], references: [id])
  recipientId   String
  readBy        User[]    @relation("messagesRead")
  deliveredAt   DateTime?
  readAt        DateTime?
}

model JobListing {
  id               String     @id @default(cuid())
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  title            String
  jobType          String
  shortDescription String?
  description      String
  location         String
  postedBy         User       @relation("jobListingsPosted", fields: [postedById], references: [id])
  postedById       String
  ComputerScreened          User[]     @relation("jobCScreen")
  HumanScreened             User[]     @relation("jobHScreen")
  hired                      User[]     @relation("jobHired")
  Expired          Boolean    @default(false)
  expireDate       DateTime?
  expireCode       String?

  applicant applicant[]
}

model Post {
  id              String      @default(cuid()) @id
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  title           String
  content         String?
  images          String?
  published       Boolean     @default(false)
  author          User?       @relation(fields: [authorId], references: [id])
  authorId        String?
  categories      Category[]
  
  comments        Comment[]
  likes           Like[]
  reports         Report[]
  savedBy         User[]      @relation("savedPosts")
}

model Comment {
  id         String   @default(cuid()) @id
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  content    String
  author     User     @relation(fields: [authorId], references: [id])
  authorId   String
  post       Post     @relation(fields: [postId], references: [id])
  postId     String
}

model Like {
  id         String   @default(cuid()) @id
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  post       Post     @relation(fields: [postId], references: [id])
  postId     String
}

model Report {
  id         String   @default(cuid()) @id
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  reason     String
  reportedBy User     @relation(fields: [reportedById], references: [id])
  reportedById String
  post       Post     @relation(fields: [postId], references: [id])
  postId     String
}

model Notification {
  id         String   @default(cuid()) @id
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  content    String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  read       Boolean  @default(false)
}

model Education {
  id         Int      @id @default(autoincrement())
  user       User     @relation("education", fields: [userId], references: [id])
  userId     String
  school     String
  degree     String
  GPA        Float?
  major      String
  startDate  DateTime
  endDate    DateTime
  description String?
}

model Experience {
  id           Int      @id @default(autoincrement())
  user         User     @relation("experience", fields: [userId], references: [id])
  userId       String
  title        String
  employmentType String
  companyName  String
  locationName String
  locationType String
  currently    Boolean
  startDate    DateTime
  endDate      DateTime?
  description  String?
}

model Category {
  id         Int       @id @default(autoincrement())
  name       String
  posts      Post[]
}
